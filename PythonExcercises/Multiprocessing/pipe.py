'''
Created on Jan 15, 2016

@author: test
'''

import multiprocessing
import random

def writer(pipe):
	while True:
		value = random.randrange(10)
		pipe.send(value)
		print 'Value sent: %s' %value
		
def reader(pipe):
	while True:
		value = pipe.recv()
		print 'received: %s' %value
		
if __name__ == '__main__':

	pipe_in, pipe_out = multiprocessing.Pipe()	# generates pairs of connection objects generated by Pipe, two ends
	
	# watch out! the data in pipe may become corrupted if two processes (or threads) try to read from or write to the same end of the same pipe at the same time
	
	p1 = multiprocessing.Process(target=writer, args=(pipe_in,))
	p2 = multiprocessing.Process(target=reader, args=(pipe_out,))
	
	p1.start()
	p2.start()